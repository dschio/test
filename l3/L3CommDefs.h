/*
 * L2CommDefs.h
 *
 *  Created on: Aug 13, 2018
 *      Author: ds
 */

#ifndef L3COMMDEFS_H_
#define L3COMMDEFS_H_

#include "L3CommEvents.h"

// for consistency with old bezel code.
#define SCK_UNSIGNED_8BIT                    uint8_t
#define SCK_SIGNED_8BIT                      int8_t
#define SCK_UNSIGNED_16BIT                   uint16_t
#define SCK_SIGNED_16BIT                     int16_t
#define SCK_UNSIGNED_32BIT                   uint32_t
#define SCK_SIGNED_32BIT                     int32_t
#define SCK_UNSIGNED_64BIT                   int64_t

#define STATUS_LEN 	2

#define SCK_FALSE	false
#define SCK_TRUE	true
#define SCK_ERR		-1

#define SCK_INVALID_OID			0
#define SCK_NULL                0
#define SCK_NULL_PTR			(void *)0
#define SIZE_MASK               0x07
#define SERIAL_BIT              0x08
#define DIRECT_WRITE_BIT        0x10     // Data is written directly
#define DIRECT_READ_BIT         0x20     // Data is read directly

#define DATA_LENGTH                          42	         // max size of the data field in a message


#pragma pack(1)

typedef enum : uint16_t
{
	FRAMETYPE_STATUS = 0x0020,
	FRAMETYPE_EVENT_REPORT = 0x000b,
	FRAMETYPE_READ_CONFIG_IO = 0x0009,
	FRAMETYPE_WRITE_CONFIG_IO = 0x000a,
	FRAMETYPE_FASTLAN = 0xff55,
	FRAMETYPE_ARE_YOU_THERE = 0x0001,
	FRAMETYPE_SETPOINT_DOWNLOAD = 0x0007,
	FRAMETYPE_SETPOINT_UPLOAD = 0x0008,
} NEW_SCK_FRAME_TYPES;

typedef enum : uint16_t
{
	STATUS_NONE = 0x0000,
	STATUS_AWAKE = 0x0001,
	STATUS_UNKNOW_CMD = 0x0002,
	STATUS_REFLASH_SUCCESS = 0x0003,
	STATUS_REFLASH_FAIL = 0x0004,
	STATUS_EARSE_FAIL = 0x0005,
	STATUS_ACK = 0x0006,
	STATUS_FLASH_DATA_READ = 0x0007,
	STATUS_FLASH_WRITE_FAIL = 0x0008,
	STATUS_FLASH_WRITE_SUCCESS = 0x0009,
	STATUS_BAD_CHECKSUM = 0x000A,
	STATUS_BAD_ETX = 0x000B,
	STATUS_BAD_LENGTH = 0x000C,
	STATUS_BAD_FLASH_ADDRESS = 0x000D,
	STATUS_BAD_MSG_TYPE = 0x000E,
	STATUS_SETPOINT_DATA = 0x0010,
	STATUS_SUCCESS = 0x0011,
	STATUS_FAILURE = 0x0012,
	STATUS_NACK = 0x0015,
	STATUS_SETPOINT_READ_SUCCESS = 0x0020,
	STATUS_SETPOINT_READ_FAIL = 0x0021,
	STATUS_SETPOINT_WRITE_SUCCESS = 0x0022,
	STATUS_SETPOINT_WRITE_FAIL = 0x0023,
	STATUS_MEMORY_DATA = 0x0024,
	STATUS_READ_CONFIG_IO_SUCCESS = 0x0030,
	STATUS_READ_CONFIG_IO_FAIL = 0x0031,
	STATUS_DIGI_IO_WRITE_SUCCESS = 0x0032,
	STATUS_DIGI_IO_WRITE_FAIL = 0x0033,
	STATUS_DIGI_DATA_SUCCESS = 0x0034,
	STATUS_DIGI_DATA_FAIL = 0x0035
} SCK_STATUS;

typedef enum : uint16_t
{
	COMMAND_READ_REQUEST = 0,
	COMMAND_WRITE_REQUEST,
	COMMAND_READ_REPLY,
	COMMAND_WRITE_REPLY,
	COMMAND_ERROR_REPLY,
	COMMAND_EVENT,
	COMMAND_DIGI_DATA_READ = 0x000c,
	COMMAND_DIGI_DATA_WRITE = 0x000d,
	COMMAND_FASTLAN = 0xff55,
	COMMAND_DOWNLOAD_SETPOINTS = 0x0007,
	COMMAND_UPLOAD_SETPOINTS = 0x0008,
} SCK_COMMAND_TYPES;

typedef enum
{
	 SCK_EVENT_ITEM_FRYER_COOK_START,
	 SCK_EVENT_ITEM_FRYER_COOK_COMPLETE,
	 SCK_EVENT_ITEM_FRYER_COOK_CANCEL,
	 SCK_EVENT_ITEM_FRYER_COOK_QUANTITY,
	 SCK_EVENT_ITEM_FRYER_STATE_LEFT_VAT,
	 SCK_EVENT_ITEM_FRYER_STATE_RIGHT_VAT,
	 SCK_EVENT_ITEM_FRYER_SET_TEMP_LEFT_VAT,
	 SCK_EVENT_ITEM_FRYER_SET_TEMP_RIGHT_VAT,
	 SCK_EVENT_ITEM_FRYER_COOK_COMPLETE_ACK,
	 SCK_EVENT_ITEM_FRYER_COOK_PREALARM,
	 SCK_EVENT_ITEM_FRYER_HOLD_START,
	 SCK_EVENT_ITEM_FRYER_HOLD_CANCEL,
	 SCK_EVENT_ITEM_FRYER_HOLD_COMPLETE,
	 SCK_EVENT_ITEM_FRYER_HOLD_COMPLETE_ACK,
	 SCK_EVENT_ITEM_FRYER_VAT_MISC_LEFT,
	 SCK_EVENT_ITEM_FRYER_VAT_MISC_RIGHT,
	 SCK_EVENT_ITEM_FRYER_VAT_MISC2_LEFT,
	 SCK_EVENT_ITEM_FRYER_VAT_MISC2_RIGHT,
	 SCK_EVENT_ITEM_FRYER_POLISH_STARTED,
	 SCK_EVENT_ITEM_FRYER_POLISH_FORCE_STARTED,
	 SCK_EVENT_ITEM_FRYER_POLISH_FORCE_CANCEL,
	 SCK_EVENT_ITEM_FRYER_POLISH_FINISHED,
	 SCK_EVENT_ITEM_FRYER_TEMP_RIGHT,
	 SCK_EVENT_ITEM_FRYER_TEMP_LEFT,
	 SCK_EVENT_ITEM_FRYER_ERROR_LEFT,
	 SCK_EVENT_ITEM_FRYER_ERROR_RIGHT

} SCK_EVENTS;

typedef enum : uint8_t
{
   ERRORCODE_NO_ERROR = 0,
   ERRORCODE_BAD_OBJECT_ID,
   ERRORCODE_BAD_DATATYPE,
   ERRORCODE_OFFSET_RANGE,
   ERRORCODE_FRAME_FORMAT,
   ERRORCODE_NO_COMPUTER,
   ERRORCODE_NO_BUFFER,
   ERRORCODE_BAD_ADDRESS,
   ERRORCODE_TIME_OUT,
   ERRORCODE_BUFFER_SIZE,
   ERRORCODE_NETWORK_INVALID,
   ERRORCODE_MISMATCHED_OID,
   ERRORCODE_MISMATCHED_OFFSET,
   ERRORCODE_MISMATCHED_COUNT,
   ERRORCODE_MISMATCHED_TID,

   ERRORCODE_BAD_CRC = 100,
   ERRORCODE_NO_NODES,
   ERRORCODE_UNKNOWN_COMMAND,
   ERRORCODE_QUEUED,
}SCK_ERRORCODES;

typedef union
{
	uint8_t byteData[DATA_SIZE];
	uint16_t wordData[DATA_SIZE / 2];
	uint32_t longData[DATA_SIZE / 4];
} SCK_MESSAGE_BUFFER_DATA;


class COMMS_EVENT
{
public:
	COMMS_EVENT() {}
	~COMMS_EVENT() {}

	EVENT_TABLE::EVENT_OIDS 	GetOID()						{ return m_oid; }
	void     			SetOID(EVENT_TABLE::EVENT_OIDS oid)		{ m_oid = oid; }
	uint16_t 			GetData()								{ return m_data; }
	void     			SetData(uint16_t dat)					{ m_data = dat; }

private:
	EVENT_TABLE::EVENT_OIDS m_oid;
	uint16_t m_data;
} ;


typedef enum {
   DATATYPE_BYTE = 0,
   DATATYPE_INTEGER,
   DATATYPE_LONG,
   DATATYPE_FLOAT,
   DATATYPE_STRING,
   DATATYPE_UBYTE,
   DATATYPE_UINTEGER,
   DATATYPE_ULONG,
   DATATYPE_SFLOAT,
}SCK_DATATYPES;

typedef struct
{
	unsigned int oid;
	const char * EventString;
} SCK_EVENT_TABLE_TYPE;


#pragma pack()

#endif /* L3COMMDEFS_H_ */
